TestCase subclass: #AlgoOlimpicosTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!AlgoOlimpicosTest methodsFor: 'tests' stamp: 'JG 8/25/2024 20:04'!test06EntreVariosAtletasDetectoAlMasFuerte	| atletaMasFuerteEsperado atletaMasFuerteObtenido algoOlimpicos  |		"Arrange"		atletaMasFuerteEsperado := 'Lasha Talakhadze'.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Fuerte'.		algoOlimpicos registrarAtletaConNombre: 'Romain Imadouchene' dePeso: 96 yAltura: 1.83 yEdad: 28 yNacionalidad: 'Francia'.	algoOlimpicos registrarAtletaConNombre: 'Lasha Talakhadze' dePeso: 150 yAltura: 1.97 yEdad: 30 yNacionalidad: 'Georgia'.	algoOlimpicos registrarAtletaConNombre: 'Antonino Pizzolato' dePeso: 89 yAltura: 1.75 yEdad: 28 yNacionalidad: 'Italia'.	algoOlimpicos registrarAtletaConNombre: 'Yu Dongju' dePeso: 88 yAltura: 1.77 yEdad: 31 yNacionalidad: 'Corea del Sur'.		"Act"		atletaMasFuerteObtenido := algoOlimpicos obtenerAtletaSegunCriterio.		"Assert"	self assert: atletaMasFuerteEsperado equals: atletaMasFuerteObtenido! !!AlgoOlimpicosTest methodsFor: 'tests' stamp: '9/14/2024 11:56'!test02UnAtletaDePaisLimitrofeConCiertoPesoYEdadPuedeLevantarCiertosKilos			| pesoMaximoEsperado pesoMaximoObtenido algoOlimpicos  |		"Arrange"		pesoMaximoEsperado := 128.493.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Fuerte'.		"El atleta es de un pais limitrofe a Francia por lo que el apoyo del publico lo ayuda. Va a poder levantar un 10% mas"	"Debido a que es joven (de 30 años o menos), puede levantar un peso que corresponde a su peso multiplicado por su altura, y luego multiplicado por la diferencia entre su altura y uno."	algoOlimpicos registrarAtletaConNombre: 'Antonino Pizzolato' dePeso: 89 yAltura: 1.75 yEdad: 28 yNacionalidad: 'Italia'.		"Act"		pesoMaximoObtenido := algoOlimpicos pesoMaximoDe: 'Antonino Pizzolato'.		"Assert"	self assert: (pesoMaximoObtenido compararCon: pesoMaximoEsperado precision: precision )! !!AlgoOlimpicosTest methodsFor: 'tests' stamp: 'DS 9/4/2024 12:23'!test03UnAtletaFrancesConCiertoPesoYEdadPuedeLevantarCiertosKilos			| pesoMaximoEsperado pesoMaximoObtenido algoOlimpicos  |		"Arrange"		pesoMaximoEsperado := 182.268.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Fuerte'.		"El atleta es de Francia por lo que mucha gente lo va a apoyar. Va a poder levantar un 25% mas"	"Por ser joven (30 años o menos) puede levantar un 175% de su peso"	algoOlimpicos registrarAtletaConNombre: 'Romain Imadouchene' dePeso: 96 yAltura: 1.83 yEdad: 28 yNacionalidad: 'Francia'.		"Act"		pesoMaximoObtenido := algoOlimpicos pesoMaximoDe: 'Romain Imadouchene'.		"Assert"	self assert: (pesoMaximoObtenido compararCon: pesoMaximoEsperado precision: precision )! !!AlgoOlimpicosTest methodsFor: 'tests' stamp: 'JG 8/25/2024 20:04'!test07EntreVariosAtletasDetectoAlMasDebil	| atletaMasDebilEsperado atletaMasDebilObtenido algoOlimpicos  |		"Arrange"		atletaMasDebilEsperado := 'Antonino Pizzolato'.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Debil'.		algoOlimpicos registrarAtletaConNombre: 'Romain Imadouchene' dePeso: 96 yAltura: 1.83 yEdad: 28 yNacionalidad: 'Francia'.	algoOlimpicos registrarAtletaConNombre: 'Lasha Talakhadze' dePeso: 150 yAltura: 1.97 yEdad: 30 yNacionalidad: 'Georgia'.	algoOlimpicos registrarAtletaConNombre: 'Antonino Pizzolato' dePeso: 89 yAltura: 1.75 yEdad: 28 yNacionalidad: 'Italia'.	algoOlimpicos registrarAtletaConNombre: 'Yu Dongju' dePeso: 88 yAltura: 1.77 yEdad: 31 yNacionalidad: 'Corea del Sur'.		"Act"		atletaMasDebilObtenido := algoOlimpicos obtenerAtletaSegunCriterio.		"Assert"	self assert: atletaMasDebilEsperado equals: atletaMasDebilObtenido! !!AlgoOlimpicosTest methodsFor: 'tests' stamp: 'JG 8/25/2024 20:03'!test04EntreUnAtletaYOtroDetectaAlMasFuerte	| atletaMasFuerteEsperado atletaMasFuerteObtenido algoOlimpicos  |		"Arrange"		atletaMasFuerteEsperado := 'Lasha Talakhadze'.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Fuerte'.		algoOlimpicos registrarAtletaConNombre: 'Romain Imadouchene' dePeso: 96 yAltura: 1.83 yEdad: 28 yNacionalidad: 'Francia'.	algoOlimpicos registrarAtletaConNombre: 'Lasha Talakhadze' dePeso: 150 yAltura: 1.97 yEdad: 30 yNacionalidad: 'Georgia'.		"Act"		atletaMasFuerteObtenido := algoOlimpicos obtenerAtletaSegunCriterio.		"Assert"	self assert: atletaMasFuerteEsperado equals: atletaMasFuerteObtenido! !!AlgoOlimpicosTest methodsFor: 'tests' stamp: '9/13/2024 20:35'!test01UnAtletaConCiertoPesoYEdadPuedeLevantarCiertosKilos			| pesoMaximoEsperado pesoMaximoObtenido algoOlimpicos |		"Arrange"		pesoMaximoEsperado := 286.635.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Fuerte'.		"El atleta es de un pais lejano a Francia por lo que no lo apoya mucha gente." 	"Debido a que es joven (de 30 años o menos), puede levantar un peso que corresponde a su peso multiplicado por su altura, y luego multiplicado por la diferencia entre su altura y uno."	algoOlimpicos registrarAtletaConNombre: 'Lasha Talakhadze' dePeso: 150 yAltura: 1.97 yEdad: 30 yNacionalidad: 'Georgia'.		"Act"		pesoMaximoObtenido := algoOlimpicos pesoMaximoDe: 'Lasha Talakhadze'.			"Assert"	self assert: (pesoMaximoObtenido compararCon: pesoMaximoEsperado precision: precision )! !!AlgoOlimpicosTest methodsFor: 'tests' stamp: 'DS 9/4/2024 12:19'!test05UnAtletaVeteranoConCiertoPesoYEdadPuedeLevantarCiertosKilos			| pesoMaximoEsperado pesoMaximoObtenido algoOlimpicos  |		"Arrange"		pesoMaximoEsperado := 155.76.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Fuerte'.		"El atleta es de un pais lejano a Francia por lo que no lo apoya mucha gente." 	"Por ser veterano (31 años o mas) puede levantar un 195% de su peso"	algoOlimpicos registrarAtletaConNombre: 'Yu Dongju' dePeso: 88 yAltura: 1.77 yEdad: 31 yNacionalidad: 'Corea del Sur'.		"Act"		pesoMaximoObtenido := algoOlimpicos pesoMaximoDe: 'Yu Dongju'.		"Assert"	self assert: (pesoMaximoObtenido compararCon: pesoMaximoEsperado precision: precision )! !!AlgoOlimpicosTest methodsFor: 'tests' stamp: 'JG 9/6/2024 17:17'!test08UnAtletaConCiertoPesoYEdadPuedeLevantarCiertosKilosEnLaLuna				"Arrange"		| pesoEnLunaEsperado algoOlimpicos pesoMaximoObtenido |	pesoEnLunaEsperado := 47.48.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Fuerte'.		"El atleta es de un pais lejano a Francia por lo que no lo apoya mucha gente." 	"Por ser joven (30 años o menos) puede levantar un 175% de su peso"	algoOlimpicos registrarAtletaConNombre: 'Lasha Talakhadze' dePeso: 150 yAltura: 1.97 yEdad: 30 yNacionalidad: 'Georgia'.		"Act"		pesoMaximoObtenido := algoOlimpicos pesoMaximoDe: 'Lasha Talakhadze'.			"Assert"	"Peso en la Luna = Peso en la Tierra × (1.625 / 9.81)"	self assert: (pesoMaximoObtenido compararPesoEnLunaCon: pesoEnLunaEsperado  precision: precision )! !!AlgoOlimpicosTest methodsFor: 'running' stamp: 'JG 8/25/2024 20:22'!setUp	super setUp.	precision := 1e-3.	"Put here a common initialization logic for tests"! !TestCase subclass: #TestAtleta	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!TestAtleta methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/21/2024 13:35'!test03UnAtletaLejanoYJovenDaSuPesoMaximo	|atleta pesoMaximo pesoMaximoEsperado precision|	"arrange"	precision := 1e-3.	atleta := Atleta conNombre: 'Jorginho' yPeso:130 yAltura:1.76 yEdad: 24 yNacionalidad: 'Portugal' .	pesoMaximoEsperado :=  173.888.	"act"		pesoMaximo := atleta calcularPesoMaximo.		"assert"		self assert: (pesoMaximo compararCon: pesoMaximoEsperado precision: precision )! !!TestAtleta methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 18:20'!test07UnAtletaLimitrofeYVeteranoDaSuPesoMaximo	|atleta pesoMaximo pesoMaximoEsperado precision|	"arrange"	precision := 1e-3.	atleta := Atleta conNombre: 'Valentino' yPeso:130 yAltura:1.76 yEdad: 31 yNacionalidad: 'Italia' .	pesoMaximoEsperado :=  251.68.	"act"		pesoMaximo := atleta calcularPesoMaximo.		"assert"		self assert: (pesoMaximo compararCon: pesoMaximoEsperado precision: precision )! !!TestAtleta methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/21/2024 13:29'!test02UnAtletaNosDaSuPesoMaximo	|atleta pesoMaximo pesoMaximoEsperado precision|	"arrange"	precision := 1e-3.	atleta := Atleta conNombre: 'pedro' yPeso:130 yAltura:1.63 yEdad: 24 yNacionalidad: 'España'.	pesoMaximoEsperado := 146.8467.	"act"		pesoMaximo := atleta calcularPesoMaximo .		"assert"		self assert: (pesoMaximo compararCon: pesoMaximoEsperado precision: precision )! !!TestAtleta methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/23/2024 01:06'!test14UnAtletaSuizoNosDaSuPesoMaximo	|atleta pesoMaximo|		atleta := Atleta conNombre: 'Romelu' yPeso: 120  yAltura: 2 yEdad: 44 yNacionalidad: 'Suiza'.		pesoMaximo := atleta calcularPesoMaximo .		self assert: (pesoMaximo compararCon: 264.000 precision:1e-3)	! !!TestAtleta methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/21/2024 13:36'!test08UnAtletaLocalYVeteranoDaSuPesoMaximo	|atleta pesoMaximo pesoMaximoEsperado precision|	"arrange"	precision := 1e-3.	atleta := Atleta conNombre: 'franzua' yPeso:130 yAltura:1.76 yEdad: 31 yNacionalidad: 'Francia' .	pesoMaximoEsperado := 286.	"act"		pesoMaximo := atleta calcularPesoMaximo.		"assert"		self assert: (pesoMaximo compararCon: pesoMaximoEsperado precision: precision )! !!TestAtleta methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/23/2024 01:07'!test13UnAtletaAlemanNosDaSuPesoMaximo	|atleta pesoMaximo|		atleta := Atleta conNombre: 'Romelu' yPeso: 120  yAltura: 2 yEdad: 44 yNacionalidad: 'Alemania'.		pesoMaximo := atleta calcularPesoMaximo .		self assert: (pesoMaximo compararCon: 264.000 precision:1e-3)	! !!TestAtleta methodsFor: 'tests' stamp: 'vc 9/25/2024 19:56'!test11UnAtletaRecibeUnNombreQueNoEsUnString	|atleta|	self  should: [         atleta := Atleta conNombre: 3 yPeso: 50  yAltura: 1.45  yEdad: 35 yNacionalidad: 'Aleman'    ]  raise: NombreAtletaInvalidoError   .	! !!TestAtleta methodsFor: 'tests' stamp: 'vc 9/25/2024 19:56'!test09UnAtletaRecibeUnNombreNuloYLanzaError	|atleta|	self should: [         atleta := Atleta conNombre: '' yPeso: 50  yAltura: 1.45  yEdad: 35 yNacionalidad: 'Aleman'    ] raise: NombreAtletaInvalidoError   .	! !!TestAtleta methodsFor: 'tests' stamp: 'vc 9/25/2024 19:56'!test12UnAtletaRecibeUnNombreDe2Caracteres	|atleta|	self  should: [         atleta := Atleta conNombre: 'pe' yPeso: 50  yAltura: 1.45  yEdad: 35 yNacionalidad: 'Aleman'    ]  raise: NombreAtletaInvalidoError   .	! !!TestAtleta methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/23/2024 00:55'!test04UnAtletaLimitrofeYJovenDaSuPesoMaximo	|atleta pesoMaximo pesoMaximoEsperado precision|	"arrange"	precision := 1e-3.	atleta := Atleta conNombre: 'Jourguen' yPeso:130 yAltura:1.76 yEdad: 24 yNacionalidad: 'Suiza' .	pesoMaximoEsperado := 191.2768.	"act"		pesoMaximo := atleta calcularPesoMaximo.		"assert"		self assert: (pesoMaximo compararCon: pesoMaximoEsperado precision: precision )! !!TestAtleta methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/21/2024 13:35'!test05UnAtletaLocalYJovenDaSuPesoMaximo	|atleta pesoMaximo pesoMaximoEsperado precision|	"arrange"	precision := 1e-3.	atleta := Atleta conNombre: 'Franzua' yPeso:130 yAltura:1.76 yEdad: 24 yNacionalidad: 'Francia' .	pesoMaximoEsperado := 217.36.	"act"		pesoMaximo := atleta calcularPesoMaximo.		"assert"		self assert: (pesoMaximo compararCon: pesoMaximoEsperado precision: precision )! !!TestAtleta methodsFor: 'tests' stamp: 'vc 9/25/2024 19:56'!test10UnAtletaRecibeUnNombreEnElLimiteDeCaracteres	|atleta|	self  shouldnt: [         atleta := Atleta conNombre: 'Xin' yPeso: 50  yAltura: 1.45  yEdad: 35 yNacionalidad: 'Alemania'    ]  raise: NombreAtletaInvalidoError   .	! !!TestAtleta methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 18:29'!test01UnAtletaNosDaSuNombre	|atleta nombre|	"arrange"		atleta := Atleta conNombre: 'pedro' yPeso:130 yAltura:1.63 yEdad: 24 yNacionalidad: 'Suiza' .			"act"		nombre := atleta darNombre.		"assert"		self assert: nombre equals: 'pedro'.	! !!TestAtleta methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/21/2024 13:35'!test06UnAtletaLejanoYVeteranoDaSuPesoMaximo	|atleta pesoMaximo pesoMaximoEsperado precision|	"arrange"	precision := 1e-3.	atleta := Atleta conNombre: 'Jorginho' yPeso:130 yAltura:1.76 yEdad: 31 yNacionalidad: 'Portugal' .	pesoMaximoEsperado :=  228.8.	"act"		pesoMaximo := atleta calcularPesoMaximo.		"assert"		self assert: (pesoMaximo compararCon: pesoMaximoEsperado precision: precision )! !TestCase subclass: #TestCriterio	instanceVariableNames: 'unAtletaLejano otroAtletaLimitrofe otroAtletaLocal atletas'	classVariableNames: ''	package: 'TP1-Tests'!!TestCriterio methodsFor: 'running' stamp: 'ValentinoCeniceros 9/22/2024 18:22'!setUp 	unAtletaLejano := Atleta conNombre: 'Dimitri Lovanchenco' yPeso: 134  yAltura: 2.4 yEdad: 35  yNacionalidad: 'Ruso'.	otroAtletaLimitrofe := Atleta conNombre: 'Pablo Lopez' yPeso: 100 yAltura: 1.78  yEdad: 30  yNacionalidad: 'Suizo'.	otroAtletaLocal := Atleta conNombre: 'Jean Vaptise' yPeso: 95 yAltura: 1.77  yEdad: 37 yNacionalidad: 'Frances'.	atletas := Set new.	atletas addAll:{otroAtletaLimitrofe .otroAtletaLocal. unAtletaLejano }	 ! !!TestCriterio methodsFor: 'tests' stamp: '9/16/2024 23:58'!test02seEligePorCriterioDebilUnAtletaDeUnaListaDe3	|debil atleta|		debil := Debil new.		atleta := debil obtenerAtletaPorCriterio: atletas .		self assert: atleta equals: otroAtletaLimitrofe 	! !!TestCriterio methodsFor: 'tests' stamp: '9/16/2024 23:57'!test01seEligePorCriterioFuerteUnAtletaDeUnaListaDe3	|fuerte atleta|		fuerte := Fuerte new.		atleta := fuerte obtenerAtletaPorCriterio: atletas .		self assert: atleta equals: unAtletaLejano 	! !TestCase subclass: #TestEdad	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!TestEdad methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/21/2024 11:38'!test01SeDefineUnaEdadJovenYSeSeCalculaElPeso	| edad altura peso |	altura := 1.76.	edad := Edad deEdad: Joven new conAltura: altura.	peso := Peso deValor: 60.		peso := edad calcularPorcentaje: peso.	self assert:( peso compararCon: 80.256 precision:  1e-3)! !!TestEdad methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/21/2024 11:37'!test02SeDefineUnaEdadVeteranaYSeCalculaElPeso	| edad altura peso |	altura := 1.76.	edad := Edad deEdad: Veterano new conAltura: altura.	peso := Peso deValor: 60.		peso := edad calcularPorcentaje: peso.		self assert:(peso compararCon: 105.6 precision: 1e-3)! !TestCase subclass: #TestNacionalidad	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!TestNacionalidad methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 16:32'!test02SeCrearUnaNacionalidadLimitrofeYSeCalcularUnaVentaja	| nacionalidad peso pesoPorcentualANacionalidad |	nacionalidad := Nacionalidad deCondicion: Limitrofe new.	peso := Peso deValor: 60.	pesoPorcentualANacionalidad := nacionalidad calcularPorcentaje: peso.	self assert: (peso compararCon: 66 precision: 1)! !!TestNacionalidad methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 16:31'!test01SeCrearUnaNacionalidadLejanaYSeCalcularUnaVentaja	| nacionalidad peso pesoPorcentualANacionalidad|	nacionalidad := Nacionalidad deCondicion: Lejano new.		peso := Peso deValor: 60.		pesoPorcentualANacionalidad := nacionalidad calcularPorcentaje: peso.	self assert: (pesoPorcentualANacionalidad compararCon: 60 precision:1 )! !!TestNacionalidad methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 16:32'!test03SeCrearUnaNacionalidadLocalYSeCalcularUnaVentaja	| nacionalidad peso pesoPorcentualANacionalidad|	nacionalidad := Nacionalidad deCondicion: Local new.	peso := Peso deValor: 60.		pesoPorcentualANacionalidad := nacionalidad calcularPorcentaje: peso.	self assert: (pesoPorcentualANacionalidad compararCon: 75 precision: 1)! !TestCase subclass: #TestPeso	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!TestPeso methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 13:14'!test06SeCreaUnPesoYSeLoConvierteALunar |unPeso pesoEsperado|		unPeso  := Peso deValor: 60.	pesoEsperado := 9.939.		unPeso convertirAPesoLunar.		self assert: (unPeso compararCon: pesoEsperado  precision:1e-3).	! !!TestPeso methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 13:15'!test07SeCreaUnPesoYSeLoComparaConSuPesoEnLaLuna |unPeso pesoEsperado resultado|		unPeso  := Peso deValor: 60.	pesoEsperado := 9.939.		resultado := unPeso compararPesoEnLunaCon: pesoEsperado  precision: 1e-3.		self assert: (resultado ).	! !!TestPeso methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 13:07'!test04SeCrean2pesosYSeVerificaSiUnoEsMayorQueOtro |unPeso otroPeso resultado|		unPeso  := Peso deValor: 60.	otroPeso := Peso deValor: 75.		resultado := unPeso < otroPeso .			self assert: (resultado ).	! !!TestPeso methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 18:26'!test13SeMultiplicaPorUnPesoPor0YSeEsperaElError |unPeso|	unPeso   := Peso deValor: 2.	self should: [         unPeso  multiplicarPor: 0.    ] raise: PesoInvalidoError   .	! !!TestPeso methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 14:20'!test10SeCreaUnPesoNuloYSeEsperaElError |unPeso|	self should: [         unPeso   := Peso deValor: 0.    ] raise: PesoInvalidoError   .	! !!TestPeso methodsFor: 'tests' stamp: '9/16/2024 19:05'!test01SeCreaUnPesoYSeContrastaSuValorNumerico |peso pesoEsperado|		pesoEsperado := 60. 		peso := Peso deValor: 60.		self assert: peso obtenerValorNumerico equals: pesoEsperado 	! !!TestPeso methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 16:27'!test11SeCreaUnPesoApenasMayorA0YSeNoEsperaElError |unPeso|	self shouldnt: [         unPeso   := Peso deValor: 1.    ] raise: PesoInvalidoError   .	! !!TestPeso methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 18:25'!test13SeMultiplicaPorUnPesoApenasMayorA0YSeNoEsperaElError |unPeso|	unPeso   := Peso deValor: 2.	self shouldnt: [         unPeso  multiplicarPor: 1.    ] raise: PesoInvalidoError   .	! !!TestPeso methodsFor: 'tests' stamp: '9/16/2024 19:13'!test02SeCreaUnPesoYSeComparaConUnValorNumerico |peso comparacion|	peso := Peso deValor: 60.		comparacion := peso compararCon: 60 precision: 1.		self assert: comparacion 	! !!TestPeso methodsFor: 'tests' stamp: 'vc 9/25/2024 19:46'!test08SeCreaUnPesoNegativoYSeEsperaElError |unPeso|	self should: [         unPeso   := Peso deValor: -3.    ] raise: PesoInvalidoError  .	! !!TestPeso methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 13:07'!test05SeCrean2pesosYSeVerificaSiUnoEsMenorQueOtro |unPeso otroPeso resultado|		unPeso  := Peso deValor: 60.	otroPeso := Peso deValor: 55.		resultado := unPeso > otroPeso .			self assert: (resultado ).	! !!TestPeso methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/21/2024 13:47'!test03SeCreaUnPesoYSeLoMultiplicaPorUnValorNumerico |peso|	peso := Peso deValor: 60.		peso multiplicarPor: 2.			self assert: (peso compararCon: 120 precision: 1).	! !!TestPeso methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 13:23'!test09SeMultiplicaUnPesoPorUnNegativoYSeEsperaElError |unPeso|	unPeso   := Peso deValor: 60.	self should: [         unPeso multiplicarPor: -3.    ] raise: PesoInvalidoError   .	! !TestCase subclass: #TestSeleccionar	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 13:02'!test09SeEligeUnaNacionalidadQueNoEsUnStringMayorA3CaracteresYSeLanzaError	|nacionalidad|	self should: [         nacionalidad  := SeleccionadorDeNacion  seleccionar: 'bo'    ] raise: NacionInvalidaError  .	! !!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 17:46'!test14deEligeUnCriterioInvalido	|criterio|	self should: [         criterio := SeleccionadorDeCriterio seleccionar: 'fuerte'.     ] raise: CriterioInvalidoError .		! !!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 18:21'!test03SeEligeUnaNacionalidadLimitrofeYSeVerificaQueEstaSeComporteComoTal	|peso nacion|		peso := Peso deValor: 60.		nacion := SeleccionadorDeNacion seleccionar: 'Belgica'.		nacion calcularPorcentaje: peso.		self assert:( peso compararCon: 66 precision: 1)! !!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/21/2024 13:28'!test05SeEligeUnaEdadVeteranaSeVerificaQueEstaSeComporteComoTal	|peso edad|		peso := Peso deValor: 60.		edad := SeleccionadorDeEdad seleccionar: 35 yAltura: 1.76.	 		edad calcularPorcentaje: peso.		self assert:(peso compararCon: 105.6 precision: 1e-3)! !!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 17:43'!test12SeEligeUnCriterioFuerte	|fuerte atletas unAtleta otroAtleta atletaObtenido|		unAtleta := Atleta conNombre: 'Dimitri Lovanchenco' yPeso: 134  yAltura: 2.4 yEdad: 35  yNacionalidad: 'Ruso'.	otroAtleta := Atleta conNombre: 'Pablo Lopez' yPeso: 100 yAltura: 1.78  yEdad: 30  yNacionalidad: 'España'.		atletas := Set new. atletas add:unAtleta . atletas add: otroAtleta  .		fuerte := SeleccionadorDeCriterio seleccionar: 'Fuerte'. 	atletaObtenido := fuerte  obtenerAtletaPorCriterio: atletas.		self assert: atletaObtenido  equals: unAtleta 			! !!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 12:26'!test06SeEligeUnaEdadNegativaYElSeleccionadorRespondeConUnError	|edad|	self should: [         edad := SeleccionadorDeEdad seleccionar: -35 yAltura: 1.76     ] raise: EdadInvalidaError.! !!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 18:35'!test16SeEligeUnaNacionalidadDeMenosDe3Caracteres	|nacion|	self should: [         nacion := SeleccionadorDeNacion  seleccionar: 'bo'.     ] raise: NacionInvalidaError  .				! !!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 18:32'!test04SeEligeUnaEdadJovenSeVerificaQueEstaSeComporteComoTal	|peso edad|		peso := Peso deValor: 60.		edad := SeleccionadorDeEdad seleccionar: 16 yAltura: 1.76.	 		edad calcularPorcentaje: peso.		self assert:(peso compararCon: 80.256 precision:  1e-3)! !!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 12:32'!test08SeEligeUnaAlturaMenorA135CMYElSeleccionadorRespondeConUnError	|edad|	self should: [         edad := SeleccionadorDeEdad seleccionar: 35 yAltura: 0.76     ] raise: AlturaInvalidaError .! !!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 18:03'!test15SeEligeUnaNacionalidadQueNoEsUnString	|nacion|	self should: [         nacion := SeleccionadorDeNacion  seleccionar: 3.     ] raise: NacionInvalidaError  .		! !!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 18:31'!test07SeEligeUnaEdadMayorA55YElSeleccionadorRespondeConUnError	|edad|	self should: [         edad := SeleccionadorDeEdad seleccionar: 56 yAltura: 1.76     ] raise: EdadInvalidaError.! !!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/21/2024 13:16'!test01SeEligeUnaNacionalidadLocalYSeVerificaQueEstaSeComporteComoTal	|peso nacion|		peso := Peso deValor: 60.		nacion := SeleccionadorDeNacion seleccionar: 'Francia'.		nacion calcularPorcentaje: peso.		self assert:( peso compararCon: 75 precision: 1)! !!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 14:19'!test11SeEligeUnaEdadDelBordeSuperiorYElSeleccionadorRespondeConUnError	|edad|	self should: [         edad := SeleccionadorDeEdad seleccionar: 56 yAltura: 1.76     ] raise: EdadInvalidaError.! !!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 17:44'!test13SeEligeUnCriterioDebil	|debil  atletas unAtleta otroAtleta atletaObtenido|		unAtleta := Atleta conNombre: 'Dimitri Lovanchenco' yPeso: 134  yAltura: 2.4 yEdad: 35  yNacionalidad: 'Ruso'.	otroAtleta := Atleta conNombre: 'Pablo Lopez' yPeso: 100 yAltura: 1.78  yEdad: 30  yNacionalidad: 'España'.		atletas := Set new. atletas add:unAtleta . atletas add: otroAtleta  .		debil := SeleccionadorDeCriterio seleccionar: 'Debil'. 	atletaObtenido := debil  obtenerAtletaPorCriterio: atletas.		self assert: atletaObtenido  equals: otroAtleta  			! !!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/21/2024 13:18'!test02SeEligeUnaNacionalidadLejanaYSeVerificaQueEstaSeComporteComoTal	|peso nacion|		peso := Peso deValor: 60.		nacion := SeleccionadorDeNacion seleccionar: 'Argentina'.		nacion calcularPorcentaje: peso.		self assert:( peso compararCon: 60 precision: 1)! !!TestSeleccionar methodsFor: 'tests' stamp: 'ValentinoCeniceros 9/22/2024 14:19'!test10SeEligeUnaEdadDelBordeInferiorYElSeleccionadorRespondeConUnError	|edad|	self should: [         edad := SeleccionadorDeEdad seleccionar: 15 yAltura: 1.76     ] raise: EdadInvalidaError.! !